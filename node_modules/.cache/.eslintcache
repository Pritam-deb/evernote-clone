[{"/home/pritam/Documents/GitHub/evernote-clone/src/index.js":"1","/home/pritam/Documents/GitHub/evernote-clone/src/App.js":"2","/home/pritam/Documents/GitHub/evernote-clone/src/reportWebVitals.js":"3","/home/pritam/Documents/GitHub/evernote-clone/src/editor/editor.js":"4","/home/pritam/Documents/GitHub/evernote-clone/src/firebase/config.js":"5","/home/pritam/Documents/GitHub/evernote-clone/src/sidebar/sidebar.js":"6","/home/pritam/Documents/GitHub/evernote-clone/src/helpers.js":"7","/home/pritam/Documents/GitHub/evernote-clone/src/editor/styles.js":"8","/home/pritam/Documents/GitHub/evernote-clone/src/sidebar/styles.js":"9","/home/pritam/Documents/GitHub/evernote-clone/src/sidebaritem/sidebarItem.js":"10","/home/pritam/Documents/GitHub/evernote-clone/src/sidebaritem/styles.js":"11"},{"size":471,"mtime":1618926233158,"results":"12","hashOfConfig":"13"},{"size":3449,"mtime":1619341481546,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1618660519933,"results":"15","hashOfConfig":"13"},{"size":2549,"mtime":1619352477129,"results":"16","hashOfConfig":"13"},{"size":839,"mtime":1618908902268,"results":"17","hashOfConfig":"13"},{"size":3016,"mtime":1619352516022,"results":"18","hashOfConfig":"13"},{"size":356,"mtime":1619248618636,"results":"19","hashOfConfig":"13"},{"size":770,"mtime":1619171854284,"results":"20","hashOfConfig":"13"},{"size":1266,"mtime":1619171225055,"results":"21","hashOfConfig":"13"},{"size":1392,"mtime":1619180614695,"results":"22","hashOfConfig":"13"},{"size":309,"mtime":1618918618600,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dof8na",{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pritam/Documents/GitHub/evernote-clone/src/index.js",[],"/home/pritam/Documents/GitHub/evernote-clone/src/App.js",["49","50","51"],"import React, { useEffect, useState } from 'react';\n//import firebase from './firebase/config'\n//import logo from './logo.svg';\nimport './App.css';\nimport projectFirestore from './firebase/config';\nimport {Button, withStyles} from '@material-ui/core';\nimport firebase from 'firebase/app';\nimport EditorComponent from './editor/editor';\nimport SidebarComponent from './sidebar/sidebar';\n\nfunction App() {\n  const [selectedNote, setSelectedNote] = useState(null);\n  const [notes, setNotes] = useState(null);\n  const [selectedNoteIndex, setSelectedNoteIndex] = useState(null);\n\n  useEffect(()=>{\n    firebase\n      .firestore()\n      .collection('notes')\n      .onSnapshot(serverUpdate => {\n        const notes = serverUpdate.docs.map(_doc => {\n          const data = _doc.data();\n          data['id'] = _doc.id;\n          return data;\n        });\n        console.log(notes);\n        setNotes(notes);\n      })\n  },[])\n\n  const selectNote = (note, index) => {\n    setSelectedNote(note);\n    setSelectedNoteIndex(index);\n  }\n\n  const noteUpdate = (id, noteObj) => {\n    firebase\n      .firestore()\n      .collection('notes')\n      .doc(id)\n      .update({\n        title: noteObj.title,\n        body: noteObj.body,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n      })\n    //console.log('the ID is: ',id);\n  }\n\n  const deleteNote = async(note) => {\n    const noteIndex = notes.indexOf(note);\n    await setNotes(notes.filter(_note => _note !== note));\n    if(selectedNoteIndex === noteIndex) {\n\n       setSelectedNoteIndex(null);\n       setSelectedNote(null);\n    }\n    else{\n      notes.length > 1 ?\n      selectNote(notes[selectedNoteIndex - 1], selectedNoteIndex - 1) : \n       setSelectedNoteIndex(null);\n       setSelectedNote(null);\n    }\n\n    firebase.firestore().collection('notes').doc(note.id).delete();\n  }\n\n\n\n  const newNote = async(title) => {\n    const note = {\n      title: title,\n      body: ''\n    };\n     \n    const newFromDB = await firebase.firestore().collection('notes').add({\n      title: note.title,\n      body: note.body,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    const newID = newFromDB.id;\n    await setNotes({ notes: [...notes, note] });\n    const newNoteIndex = notes.indexOf(notes.filter(_note => _note.id === newID)[0]);\n    setSelectedNote(notes[newNoteIndex]);\n    setSelectedNoteIndex(newNoteIndex);\n  }\n\n  return (\n    <div className=\"App\">\n      \n        <SidebarComponent \n            selectedNoteIndex = {selectedNoteIndex}\n            notes = {notes}\n            deleteNote={deleteNote}\n            selectNote = {selectNote}\n            newNote={newNote}\n            >\n        </SidebarComponent>\n        {\n        selectedNote ? \n          <EditorComponent \n          key = {selectedNoteIndex}\n          selectedNote={selectedNote}\n          selectedNoteIndex={selectedNoteIndex}\n          notes = {notes}\n          noteUpdate = {noteUpdate}></EditorComponent>  :\n        null\n        }\n        \n        \n    </div>\n  );\n\n\n  // const componentDidMount = () => {\n  //   firebase\n  //     .firestore()\n  //     .collection('notes')\n  //     .onSnapshot(serverUpdate => {\n  //       const notes = serverUpdate.docs.map(_doc => {\n  //         const data = _doc.data();\n  //         data['id'] = _doc.id;\n  //         return data;\n  //       });\n  //       console.log(notes);\n  //       this.setState({ notes: notes });\n  //     });\n  // }\n}\n\nexport default App;\n","/home/pritam/Documents/GitHub/evernote-clone/src/reportWebVitals.js",[],"/home/pritam/Documents/GitHub/evernote-clone/src/editor/editor.js",["52","53","54","55"],"\nimport React, {useState, useRef, useEffect} from 'react';\nimport ReactQuill from 'react-quill';\nimport debounce from '../helpers';\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './styles';\n\nfunction EditorComponent(props) {\n      const [text, setText] = useState('');\n      const [title, setTitle] = useState(props.selectedNote.title);\n      const [id, setId] = useState(props.selectedNote.id);\n      const classes = props;\n\n\n      // const updateBody = async(val)=>{\n      //       await setText(val);\n      //       update();\n      // };\n\n\n      const updateBody = (val) => {\n            props.noteUpdate(id, {\n              title: title,\n              body: val\n            });\n            \n            setText(val);\n            //console.log('this ',id)\n      };\n        \n      const debounce = (func, delay) => {\n            let timer;\n        \n            return (...args) => {\n              clearTimeout(timer);\n              timer = setTimeout(() => func.apply(null, args), delay);\n            };\n      };\n\n      // const update = useRef(\n\t// \tdebounce(() => {\n\t// \t\tprops.noteUpdate(id,{\n      //                   title:title,\n      //                   body:text,\n      //             })\n      //             //console.log(props.selectedNote.body);\n\t// \t}, 1500)\n      // ).current\n\n      useEffect(()=>{\n            setText(props.selectedNote.body);\n            setTitle(props.selectedNote.title);\n            setId(props.selectedNote.id);\n            //console.log('this ',id)\n      },[])\n\n \n\n      useEffect(()=>{\n            if(props.selectedNote.id !== id) {\n            setText(props.selectedNote.body);\n            setTitle(props.selectedNote.title);\n            setId(props.selectedNote.id);\n            //console.log('this is ', id)\n            }\n      },[])\n\n      const updateTitle = async(txt) => {\n            await setTitle(txt)\n      }\n\n    return (\n        \n            <div className={classes.editorContainer}>\n                  <BorderColorIcon className={classes.editIcon}></BorderColorIcon>\n                  <input className={classes.titleInput} placeholder='Note title....' value={title ? title : ''} onChange={(e) => updateTitle(e.target.value)}>\n                  </input>\n                  <ReactQuill\n                        value = {text}\n                        onChange={debounce(updateBody, 1500)}>\n\n                  </ReactQuill>\n\n            </div>\n      );\n}\n\nexport default withStyles(styles) (EditorComponent) ;","/home/pritam/Documents/GitHub/evernote-clone/src/firebase/config.js",["56"],"import firebase from 'firebase/app';\n\nimport 'firebase/storage';\nimport 'firebase/firestore';\n\n\n\n\n\n// Your web app's Firebase configuration\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional\n  var firebaseConfig = {\n    apiKey: \"AIzaSyCusFFSYjvEg6EybCpaeeC6LQIT3zL4i60\",\n    authDomain: \"evernote-console.firebaseapp.com\",\n    projectId: \"evernote-console\",\n    storageBucket: \"evernote-console.appspot.com\",\n    messagingSenderId: \"776554901895\",\n    appId: \"1:776554901895:web:3934d64778852d4bbf6322\",\n    measurementId: \"G-1FWKXL89F8\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\nconst projectStorage = firebase.storage();\nconst projectFirestore = firebase.firestore();\n//const timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\nexport default { projectStorage, projectFirestore};","/home/pritam/Documents/GitHub/evernote-clone/src/sidebar/sidebar.js",[],"/home/pritam/Documents/GitHub/evernote-clone/src/helpers.js",[],"/home/pritam/Documents/GitHub/evernote-clone/src/editor/styles.js",[],"/home/pritam/Documents/GitHub/evernote-clone/src/sidebar/styles.js",[],"/home/pritam/Documents/GitHub/evernote-clone/src/sidebaritem/sidebarItem.js",[],"/home/pritam/Documents/GitHub/evernote-clone/src/sidebaritem/styles.js",[],{"ruleId":"57","severity":1,"message":"58","line":5,"column":8,"nodeType":"59","messageId":"60","endLine":5,"endColumn":24},{"ruleId":"57","severity":1,"message":"61","line":6,"column":9,"nodeType":"59","messageId":"60","endLine":6,"endColumn":15},{"ruleId":"57","severity":1,"message":"62","line":6,"column":17,"nodeType":"59","messageId":"60","endLine":6,"endColumn":27},{"ruleId":"57","severity":1,"message":"63","line":2,"column":26,"nodeType":"59","messageId":"60","endLine":2,"endColumn":32},{"ruleId":"57","severity":1,"message":"64","line":4,"column":8,"nodeType":"59","messageId":"60","endLine":4,"endColumn":16},{"ruleId":"65","severity":1,"message":"66","line":56,"column":9,"nodeType":"67","endLine":56,"endColumn":11,"suggestions":"68"},{"ruleId":"65","severity":1,"message":"69","line":67,"column":9,"nodeType":"67","endLine":67,"endColumn":11,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":28,"column":1,"nodeType":"73","endLine":28,"endColumn":52},"no-unused-vars","'projectFirestore' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'withStyles' is defined but never used.","'useRef' is defined but never used.","'debounce' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.selectedNote.body', 'props.selectedNote.id', and 'props.selectedNote.title'. Either include them or remove the dependency array. If 'setText' needs the current value of 'props.selectedNote.body', you can also switch to useReducer instead of useState and read 'props.selectedNote.body' in the reducer.","ArrayExpression",["74"],"React Hook useEffect has missing dependencies: 'id', 'props.selectedNote.body', 'props.selectedNote.id', and 'props.selectedNote.title'. Either include them or remove the dependency array. If 'setId' needs the current value of 'props.selectedNote.id', you can also switch to useReducer instead of useState and read 'props.selectedNote.id' in the reducer.",["75"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},"Update the dependencies array to be: [props.selectedNote.body, props.selectedNote.id, props.selectedNote.title]",{"range":"80","text":"81"},"Update the dependencies array to be: [id, props.selectedNote.body, props.selectedNote.id, props.selectedNote.title]",{"range":"82","text":"83"},[1589,1591],"[props.selectedNote.body, props.selectedNote.id, props.selectedNote.title]",[1866,1868],"[id, props.selectedNote.body, props.selectedNote.id, props.selectedNote.title]"]