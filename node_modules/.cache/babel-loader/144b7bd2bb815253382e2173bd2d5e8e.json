{"ast":null,"code":"var _jsxFileName = \"/home/pritam/Documents/GitHub/evernote-clone/evernote-clone/src/editor/editor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport ReactQuill from 'react-quill';\nimport debounce from '../helpers';\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditorComponent(props) {\n  _s();\n\n  const [text, setText] = useState('');\n  const [title, setTitle] = useState('');\n  const [id, setId] = useState(''); // const [editorNoteBody, setEditorNoteBody] = useState(note.selectedNote.body);\n  // const updateBodyDebounce = useDebounce(editorNoteBody, 1500);\n  // const updateTitleDebounce = useDebounce(editorNoteTitle, 1500);\n\n  const updateBody = async val => {\n    await setText(val);\n    update();\n  }; // useEffect(() => {\n  //       setEditorNoteBody(note.selectedNote.body);\n  // }, [note.selectedNote]);\n\n\n  const update = debounce(() => {\n    noteUpdate(id, {\n      title: title,\n      body: text\n    }); // console.log('updating database');\n  }, 1500);\n  useEffect(() => {\n    setText(props.selectedNote.body);\n    setTitle(props.selectedNote.title);\n    setId(props.selectedNote.id);\n  }, []);\n  useEffect(() => {\n    if (props.selectedNote.id !== id) {\n      setText(props.selectedNote.body);\n      setTitle(props.selectedNote.title);\n      setId(props.selectedNote.id);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.editorContainer,\n    children: /*#__PURE__*/_jsxDEV(ReactQuill, {\n      value: text,\n      onChange: updateBody\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 13\n  }, this);\n}\n\n_s(EditorComponent, \"Hreu84UdV21yIBlpRXLfr6Du/hQ=\");\n\n_c = EditorComponent;\nexport default withStyles(styles)(EditorComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditorComponent\");","map":{"version":3,"sources":["/home/pritam/Documents/GitHub/evernote-clone/evernote-clone/src/editor/editor.js"],"names":["React","useState","useRef","useEffect","ReactQuill","debounce","BorderColorIcon","withStyles","styles","EditorComponent","props","text","setText","title","setTitle","id","setId","updateBody","val","update","noteUpdate","body","selectedNote","classes","editorContainer"],"mappings":";;;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,MAAzB,EAAiCC,SAAjC,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACc,EAAD,EAAKC,KAAL,IAAcf,QAAQ,CAAC,EAAD,CAA5B,CAH0B,CAI1B;AACA;AACA;;AAGA,QAAMgB,UAAU,GAAG,MAAMC,GAAN,IAAY;AACzB,UAAMN,OAAO,CAACM,GAAD,CAAb;AACAC,IAAAA,MAAM;AACX,GAHD,CAT0B,CAc1B;AACA;AACA;;;AAEA,QAAMA,MAAM,GAChBd,QAAQ,CAAC,MAAM;AACCe,IAAAA,UAAU,CAACL,EAAD,EAAI;AACRF,MAAAA,KAAK,EAAGA,KADA;AAERQ,MAAAA,IAAI,EAAGV;AAFC,KAAJ,CAAV,CADD,CAKd;AACA,GANO,EAML,IANK,CADJ;AASAR,EAAAA,SAAS,CAAC,MAAI;AACRS,IAAAA,OAAO,CAACF,KAAK,CAACY,YAAN,CAAmBD,IAApB,CAAP;AACAP,IAAAA,QAAQ,CAACJ,KAAK,CAACY,YAAN,CAAmBT,KAApB,CAAR;AACAG,IAAAA,KAAK,CAACN,KAAK,CAACY,YAAN,CAAmBP,EAApB,CAAL;AACL,GAJQ,EAIP,EAJO,CAAT;AAOAZ,EAAAA,SAAS,CAAC,MAAI;AACR,QAAGO,KAAK,CAACY,YAAN,CAAmBP,EAAnB,KAA0BA,EAA7B,EAAiC;AACjCH,MAAAA,OAAO,CAACF,KAAK,CAACY,YAAN,CAAmBD,IAApB,CAAP;AACAP,MAAAA,QAAQ,CAACJ,KAAK,CAACY,YAAN,CAAmBT,KAApB,CAAR;AACAG,MAAAA,KAAK,CAACN,KAAK,CAACY,YAAN,CAAmBP,EAApB,CAAL;AACC;AACN,GANQ,EAMP,EANO,CAAT;AAQF,sBAEQ;AAAK,IAAA,SAAS,EAAEQ,OAAO,CAACC,eAAxB;AAAA,2BACM,QAAC,UAAD;AACM,MAAA,KAAK,EAAIb,IADf;AAEM,MAAA,QAAQ,EAAEM;AAFhB;AAAA;AAAA;AAAA;AAAA;AADN;AAAA;AAAA;AAAA;AAAA,UAFR;AAUH;;GApDQR,e;;KAAAA,e;AAsDT,eAAeF,UAAU,CAACC,MAAD,CAAV,CAAoBC,eAApB,CAAf","sourcesContent":["\nimport React, {useState, useRef, useEffect} from 'react';\nimport ReactQuill from 'react-quill';\nimport debounce from '../helpers';\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './styles';\n\nfunction EditorComponent(props) {\n      const [text, setText] = useState('');\n      const [title, setTitle] = useState('');\n      const [id, setId] = useState('');\n      // const [editorNoteBody, setEditorNoteBody] = useState(note.selectedNote.body);\n      // const updateBodyDebounce = useDebounce(editorNoteBody, 1500);\n      // const updateTitleDebounce = useDebounce(editorNoteTitle, 1500);\n\n\n      const updateBody = async(val)=>{\n            await setText(val);\n            update();\n      };\n\n      // useEffect(() => {\n      //       setEditorNoteBody(note.selectedNote.body);\n      // }, [note.selectedNote]);\n\n      const update =\n\t\tdebounce(() => {\n                  noteUpdate(id,{\n                        title : title,\n                        body : text\n                  })\n\t\t\t// console.log('updating database');\n\t\t}, 1500);\n\n      useEffect(()=>{\n            setText(props.selectedNote.body);\n            setTitle(props.selectedNote.title);\n            setId(props.selectedNote.id);\n      },[])\n\n\n      useEffect(()=>{\n            if(props.selectedNote.id !== id) {\n            setText(props.selectedNote.body);\n            setTitle(props.selectedNote.title);\n            setId(props.selectedNote.id);\n            }\n      },[])\n\n    return (\n        \n            <div className={classes.editorContainer}>\n                  <ReactQuill\n                        value = {text}\n                        onChange={updateBody}>\n\n                  </ReactQuill>\n            </div>\n      );\n}\n\nexport default withStyles(styles) (EditorComponent) ;"]},"metadata":{},"sourceType":"module"}